@page "/"
@using GameBoy.Core
@inject Emulator Emulator
@inject IJSRuntime JS

<h1>Game Boy (Blazor)</h1>

<div class="row g-3">
    <div class="col-auto">
        <InputFile OnChange="OnRomSelected" />
    </div>
    <div class="col-auto align-self-center">
        <span>FPS: @(_lastFps.ToString("0.0"))</span>
    </div>
    <div class="col-auto align-self-center">
        <button class="btn btn-sm @(_audioEnabled ? "btn-success" : "btn-outline-secondary")" @onclick="ToggleAudio">
            @(_audioEnabled ? "ðŸ”Š Audio On" : "ðŸ”‡ Audio Off")
        </button>
    </div>
    <div class="col-auto align-self-center">
        <label class="form-label mb-0 me-2">Volume:</label>
        <input type="range" class="form-range" style="width: 100px;" min="0" max="100" 
               value="@((int)(_audioVolume * 100))" @oninput="OnVolumeChanged" />
        <small class="text-muted">@((int)(_audioVolume * 100))%</small>
    </div>
    <div class="col-auto">
        <small class="text-muted">Debug:</small>
        <button class="btn btn-sm btn-outline-secondary" @onclick="CreateTestPattern">Test VRAM</button>
        <button class="btn btn-sm btn-outline-secondary" @onclick="CreateDirectTestPattern">Test Direct</button>
        <button class="btn btn-sm btn-outline-info" @onclick="ShowDebugInfo">Debug Info</button>
    </div>
</div>

@if (_showDebugInfo)
{
    <div class="mt-3">
        <pre style="font-size: 0.8em; background-color: #f8f9fa; padding: 10px; border-radius: 5px;">@_debugInfo</pre>
    </div>
}

<div tabindex="0" @onkeydown="OnKeyDown" @onkeyup="OnKeyUp" @onclick="OnCanvasClick" @ref="_focusable">
    <canvas id="screen" width="160" height="144" style="image-rendering: pixelated; width: 320px; height: 288px; border:1px solid #ccc"></canvas>
    <p class="text-muted">Click here and use arrows, Z, X, Enter, Shift.</p>
    </div>

@code {
    private DotNetObjectReference<Index>? _dotNetRef;
    private double _lastFps;
    private long _lastTs;
    private ElementReference _focusable;
    private bool _isInTestMode = false;
    private bool _showDebugInfo = false;
    private string _debugInfo = "";
    private bool _audioEnabled = false;
    private double _audioVolume = 0.5;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _dotNetRef = DotNetObjectReference.Create(this);
            
            // Draw initial frame to ensure canvas shows default background color
            await JS.InvokeVoidAsync("gbInterop.drawFrame", "screen", Ppu.ScreenWidth, Ppu.ScreenHeight, Emulator.Ppu.FrameBuffer);
            
            await JS.InvokeVoidAsync("gbInterop.startRenderLoop", _dotNetRef);
            await _focusable.FocusAsync();
        }
    }

    [JSInvokable]
    public async Task<bool> OnAnimationFrame(double timestamp)
    {
        if (_lastTs == 0)
            _lastTs = (long)timestamp;
        var delta = timestamp - _lastTs;
        _lastTs = (long)timestamp;
        if (delta > 0)
            _lastFps = 1000.0 / delta;

        // Skip emulation if we're in test mode
        if (!_isInTestMode)
        {
            // Run emulator with balanced cycles per frame to maintain good performance
            // while allowing ROM to execute properly
            const int cyclesPerAnimationFrame = 17500; // Quarter of full 70224 for balanced performance
            bool frameReady = Emulator.StepFrame(cyclesPerAnimationFrame);
            
            if (frameReady)
            {
                await JS.InvokeVoidAsync("gbInterop.drawFrame", "screen", Ppu.ScreenWidth, Ppu.ScreenHeight, Emulator.Ppu.FrameBuffer);
            }

            // Update audio if enabled
            if (_audioEnabled)
            {
                await UpdateAudioBuffer();
            }
        }
        
        StateHasChanged();
        return true; // continue loop
    }

    private async Task UpdateAudioBuffer()
    {
        try
        {
            var samples = Emulator.Apu.PullSamples();
            if (samples.Length > 0)
            {
                await JS.InvokeVoidAsync("gbInterop.updateAudioBuffer", samples);
            }
        }
        catch (JSException)
        {
            // Audio might not be initialized yet - this is normal
        }
    }

    

    private void OnKeyDown(KeyboardEventArgs e) => UpdateJoypad(e, true);
    private void OnKeyUp(KeyboardEventArgs e) => UpdateJoypad(e, false);

    private void OnCanvasClick()
    {
        _isInTestMode = false; // Resume emulation when user clicks canvas
    }

    private void UpdateJoypad(KeyboardEventArgs e, bool down)
    {
        switch (e.Key)
        {
            case "ArrowRight": Emulator.Joypad.Right = down; break;
            case "ArrowLeft": Emulator.Joypad.Left = down; break;
            case "ArrowUp": Emulator.Joypad.Up = down; break;
            case "ArrowDown": Emulator.Joypad.Down = down; break;
            case "z": case "Z": Emulator.Joypad.A = down; break;
            case "x": case "X": Emulator.Joypad.B = down; break;
            case "Enter": Emulator.Joypad.Start = down; break;
            case "Shift": Emulator.Joypad.Select = down; break;
        }
    }

    private async Task OnRomSelected(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if (file is null) return;
        using var stream = file.OpenReadStream(maxAllowedSize: 4 * 1024 * 1024);
        using var ms = new MemoryStream();
        await stream.CopyToAsync(ms);
        Emulator.LoadRom(ms.ToArray());
        _isInTestMode = false; // Resume emulation when ROM is loaded
    }

    private async Task CreateTestPattern()
    {
        _isInTestMode = true; // Pause emulation
        Emulator.CreateTestPattern();
        // Immediately update the canvas to show the test pattern
        await JS.InvokeVoidAsync("gbInterop.drawFrame", "screen", Ppu.ScreenWidth, Ppu.ScreenHeight, Emulator.Ppu.FrameBuffer);
    }

    private async Task CreateDirectTestPattern()
    {
        _isInTestMode = true; // Pause emulation
        Emulator.CreateDirectTestPattern();
        // Immediately update the canvas to show the test pattern
        await JS.InvokeVoidAsync("gbInterop.drawFrame", "screen", Ppu.ScreenWidth, Ppu.ScreenHeight, Emulator.Ppu.FrameBuffer);
    }

    private void ShowDebugInfo()
    {
        _debugInfo = Emulator.GetDebugInfo();
        _showDebugInfo = !_showDebugInfo;
    }

    private async Task ToggleAudio()
    {
        if (_audioEnabled)
        {
            _audioEnabled = false;
            await JS.InvokeVoidAsync("gbInterop.disableAudio");
        }
        else
        {
            bool success = await JS.InvokeAsync<bool>("gbInterop.enableAudio");
            if (success)
            {
                _audioEnabled = true;
                await JS.InvokeVoidAsync("gbInterop.setAudioVolume", _audioVolume);
            }
        }
    }

    private async Task OnVolumeChanged(ChangeEventArgs e)
    {
        if (double.TryParse(e.Value?.ToString(), out double volume))
        {
            _audioVolume = volume / 100.0;
            if (_audioEnabled)
            {
                await JS.InvokeVoidAsync("gbInterop.setAudioVolume", _audioVolume);
            }
        }
    }
}
