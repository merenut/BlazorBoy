@using Microsoft.AspNetCore.Components.Forms
@using GameBoy.Blazor.Services
@inject ISettingsService SettingsService
@inject IJSRuntime JS

<div class="rom-loader">
    @if (_isLoaded && !_isExpanded)
    {
        <!-- Collapsed state - show loaded ROM info -->
        <div class="rom-loader-collapsed">
            <div class="loaded-rom-info">
                <div style="display: flex; align-items: center; gap: 0.75rem;">
                    <div style="font-size: 1.2rem;">üìÅ</div>
                    <div style="flex: 1;">
                        <strong>@_loadedRomName</strong>
                        @if (_selectedFileSize > 0)
                        {
                            <div><small style="color: var(--text-muted);">@FormatFileSize(_selectedFileSize)</small></div>
                        }
                    </div>
                    <button class="btn-modern btn-sm" @onclick="ExpandLoader">
                        Change ROM
                    </button>
                </div>
            </div>
        </div>
    }
    else
    {
        <!-- Expanded state - show full ROM loading interface -->
        @if (_isLoaded)
        {
            <div style="margin-bottom: 0.75rem; display: flex; justify-content: space-between; align-items: center;">
                <small style="color: var(--text-muted);">Current ROM: @_loadedRomName</small>
                <button class="btn-modern btn-sm" @onclick="CollapseLoader">
                    Minimize
                </button>
            </div>
        }
        else if (!string.IsNullOrEmpty(LastRomName))
        {
            <div style="margin-bottom: 0.75rem;">
                <small style="color: var(--text-muted);">Last ROM: @LastRomName</small>
            </div>
        }
        
        <div class="rom-upload-area @(_isDragOver ? "dragover" : "")" 
             @ondragover="OnDragOver" 
             @ondragover:preventDefault="true"
             @ondragleave="OnDragLeave"
             @ondrop="OnDrop"
             @ondrop:preventDefault="true">
            
            <div class="file-drop-content">
                <div style="font-size: 1.5rem; margin-bottom: 0.5rem;">üìÅ</div>
                <div>
                    <strong>Drop ROM file here</strong><br />
                    <small style="color: var(--text-muted);">or</small>
                </div>
                <InputFile OnChange="OnFileSelected" accept=".gb,.gbc" style="display: none;" @ref="_fileInput" />
                <button type="button" class="btn-modern btn-primary" style="margin-top: 0.75rem;" @onclick="OpenFilePicker">
                    üìÅ Browse Files
                </button>
            </div>
        </div>
        
        @if (!string.IsNullOrEmpty(_selectedFileName) && !_isLoaded)
        {
            <div style="margin-top: 1rem; padding: 0.75rem; background: var(--bg-primary); border-radius: var(--border-radius); border: 1px solid var(--border-color);">
                <strong>Selected:</strong> @_selectedFileName
                @if (_selectedFileSize > 0)
                {
                    <small style="color: var(--text-muted);">(@FormatFileSize(_selectedFileSize))</small>
                }
            </div>
        }
    }
</div>

@code {
    [Parameter] public EventCallback<(byte[] data, string fileName)> OnRomLoaded { get; set; }
    
    private bool _isDragOver = false;
    private string? _selectedFileName;
    private long _selectedFileSize;
    private InputFile? _fileInput;
    
    // State for collapsed/expanded view
    private bool _isLoaded = false;
    private bool _isExpanded = false;
    private string? _loadedRomName;
    
    public string? LastRomName { get; private set; }

    protected override async Task OnInitializedAsync()
    {
        LastRomName = await SettingsService.GetLastRomNameAsync();
    }

    private void OnDragOver(DragEventArgs e)
    {
        _isDragOver = true;
    }

    private void OnDragLeave(DragEventArgs e)
    {
        _isDragOver = false;
    }

    private void OnDrop(DragEventArgs e)
    {
        _isDragOver = false;
        // Note: Drag and drop file handling requires additional JS interop
        // For now, we'll just rely on the file picker
    }

    private async Task OnFileSelected(InputFileChangeEventArgs e)
    {
        if (e.File != null)
        {
            await ProcessFile(e.File);
        }
    }

    private async Task ProcessFile(IBrowserFile file)
    {
        try
        {
            _selectedFileName = file.Name;
            _selectedFileSize = file.Size;
            
            const int maxFileSize = 4 * 1024 * 1024; // 4MB max
            using var stream = file.OpenReadStream(maxFileSize);
            using var ms = new MemoryStream();
            await stream.CopyToAsync(ms);
            byte[] romData = ms.ToArray();
            
            // Save ROM name to settings
            await SettingsService.SetLastRomNameAsync(file.Name);
            LastRomName = file.Name;
            _loadedRomName = file.Name;
            _isLoaded = true;
            _isExpanded = false; // Collapse after loading
            
            // Notify parent component
            await OnRomLoaded.InvokeAsync((romData, file.Name));
            
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading ROM: {ex.Message}");
        }
    }

    private async Task OpenFilePicker()
    {
        if (_fileInput?.Element != null)
        {
            await JS.InvokeVoidAsync("eval", "document.querySelector('input[type=file]').click()");
        }
    }

    private void ExpandLoader()
    {
        _isExpanded = true;
        StateHasChanged();
    }

    private void CollapseLoader()
    {
        _isExpanded = false;
        StateHasChanged();
    }

    private static string FormatFileSize(long bytes)
    {
        if (bytes < 1024) return $"{bytes} B";
        if (bytes < 1024 * 1024) return $"{bytes / 1024:F1} KB";
        return $"{bytes / (1024 * 1024):F1} MB";
    }
}