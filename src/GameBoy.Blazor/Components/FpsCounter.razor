@implements IDisposable

<div class="fps-counter">
    <span style="color: var(--text-secondary); font-size: 0.9rem;">FPS:</span>
    <span class="fps-value @GetFpsClass()" style="font-weight: 600; font-family: 'Monaco', 'Consolas', monospace;">@CurrentFps.ToString("0.0")</span>
</div>

@code {
    [Parameter] public double CurrentFps { get; set; }
    
    private readonly List<double> _fpsHistory = new();
    private const int MaxHistorySize = 60; // Track last 60 frames for rolling average
    
    public double AverageFps { get; private set; }
    
    protected override void OnParametersSet()
    {
        if (CurrentFps > 0)
        {
            UpdateFpsHistory(CurrentFps);
        }
    }
    
    private void UpdateFpsHistory(double fps)
    {
        _fpsHistory.Add(fps);
        
        if (_fpsHistory.Count > MaxHistorySize)
        {
            _fpsHistory.RemoveAt(0);
        }
        
        // Calculate rolling average
        AverageFps = _fpsHistory.Count > 0 ? _fpsHistory.Average() : 0;
    }
    
    private string GetFpsClass()
    {
        if (CurrentFps >= 55) return "fps-good";
        if (CurrentFps >= 45) return "fps-warning";
        return "fps-bad";
    }
    
    public void Dispose()
    {
        _fpsHistory.Clear();
    }
}

<style>
    .fps-counter .fps-good {
        color: var(--success);
    }
    
    .fps-counter .fps-warning {
        color: var(--warning);
    }
    
    .fps-counter .fps-bad {
        color: var(--danger);
    }
</style>