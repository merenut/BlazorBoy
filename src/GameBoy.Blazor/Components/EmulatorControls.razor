@using GameBoy.Blazor.Services
@inject ISettingsService SettingsService

<div class="emulator-controls" style="display: flex; align-items: center; gap: 1rem; flex-wrap: wrap;">
    <button class="btn-modern @(_isRunning ? "btn-danger" : "btn-success")" 
            @onclick="ToggleRunPause"
            disabled="@(!_hasRom)"
            aria-label="@(_isRunning ? "Pause emulation" : "Start emulation")">
        @(_isRunning ? "‚è∏Ô∏è Pause" : "‚ñ∂Ô∏è Run")
    </button>
    
    <button class="btn-modern" 
            @onclick="Reset"
            disabled="@(!_hasRom)"
            aria-label="Reset emulation">
        üîÑ Reset
    </button>
    
    <div style="display: flex; align-items: center; gap: 0.5rem;">
        <label style="font-size: 0.9rem; color: var(--text-secondary);">Speed:</label>
        <select class="form-control-modern" 
                style="width: 80px; padding: 0.5rem;"
                value="@_speedMultiplier" 
                @onchange="OnSpeedChanged"
                aria-label="Emulation speed">
            <option value="0.5">0.5√ó</option>
            <option value="1.0">1√ó</option>
            <option value="1.5">1.5√ó</option>
            <option value="2.0">2√ó</option>
            <option value="3.0">3√ó</option>
        </select>
    </div>
</div>

@code {
    [Parameter] public bool HasRom { get; set; }
    [Parameter] public bool IsRunning { get; set; }
    [Parameter] public EventCallback OnToggleRunPause { get; set; }
    [Parameter] public EventCallback OnReset { get; set; }
    [Parameter] public EventCallback<double> OnSpeedChangeCallback { get; set; }
    
    private bool _hasRom = false;
    private bool _isRunning = false;
    private double _speedMultiplier = 1.0;

    protected override async Task OnInitializedAsync()
    {
        _speedMultiplier = await SettingsService.GetSpeedMultiplierAsync();
    }

    protected override void OnParametersSet()
    {
        _hasRom = HasRom;
        _isRunning = IsRunning;
    }

    private async Task ToggleRunPause()
    {
        if (!_hasRom) return;
        
        _isRunning = !_isRunning;
        await OnToggleRunPause.InvokeAsync();
    }

    private async Task Reset()
    {
        if (!_hasRom) return;
        
        await OnReset.InvokeAsync();
    }

    private async Task OnSpeedChanged(ChangeEventArgs e)
    {
        if (double.TryParse(e.Value?.ToString(), out double speed))
        {
            _speedMultiplier = speed;
            await SettingsService.SetSpeedMultiplierAsync(speed);
            await OnSpeedChangeCallback.InvokeAsync(speed);
        }
    }
    
    public async Task SetSpeedMultiplier(double speed)
    {
        _speedMultiplier = speed;
        await SettingsService.SetSpeedMultiplierAsync(speed);
        StateHasChanged();
    }
}