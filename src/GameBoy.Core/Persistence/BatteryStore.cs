using System;
using System.Security.Cryptography;
using System.Text;

namespace GameBoy.Core.Persistence;

/// <summary>
/// Handles battery-backed RAM persistence operations.
/// Provides ROM identification and storage key generation for unique save data per cartridge.
/// </summary>
public static class BatteryStore
{
    /// <summary>
    /// Generates a unique storage key for a ROM based on its content hash and title.
    /// </summary>
    /// <param name="romData">The ROM data to generate a key for</param>
    /// <returns>A unique string key for storage operations</returns>
    public static string GenerateRomKey(byte[] romData)
    {
        if (romData == null || romData.Length < 0x150)
        {
            return "unknown_rom";
        }

        // Extract title from ROM header (0x134-0x143)
        var titleBytes = new byte[16];
        Array.Copy(romData, 0x134, titleBytes, 0, 16);
        
        // Remove null bytes and convert to string
        int titleLength = Array.IndexOf(titleBytes, (byte)0);
        if (titleLength == -1) titleLength = 16;
        
        string title = Encoding.ASCII.GetString(titleBytes, 0, titleLength)
            .Replace(" ", "_")
            .Replace("/", "_")
            .Replace("\\", "_");

        // Generate hash of first 32KB (or entire ROM if smaller) for uniqueness
        int hashLength = Math.Min(romData.Length, 32768);
        byte[] hashBytes = new byte[hashLength];
        Array.Copy(romData, 0, hashBytes, 0, hashLength);
        
        using (var sha256 = SHA256.Create())
        {
            byte[] hash = sha256.ComputeHash(hashBytes);
            string hashString = Convert.ToHexString(hash)[..8]; // First 8 chars of hash
            
            return $"battery_{title}_{hashString}";
        }
    }

    /// <summary>
    /// Validates that battery RAM data is reasonable in size and format.
    /// </summary>
    /// <param name="data">The battery RAM data to validate</param>
    /// <returns>True if the data appears valid</returns>
    public static bool ValidateBatteryData(byte[]? data)
    {
        if (data == null) return true; // Null is valid (no save data)
        
        // Reasonable size limits (8KB to 128KB for Game Boy cartridges)
        return data.Length >= 0 && data.Length <= 131072;
    }

    /// <summary>
    /// Creates a storage key for battery RAM data specific to a ROM.
    /// </summary>
    /// <param name="romKey">The ROM key generated by GenerateRomKey</param>
    /// <returns>Storage key for battery RAM data</returns>
    public static string GetBatteryRamKey(string romKey)
    {
        return $"{romKey}_ram";
    }
}